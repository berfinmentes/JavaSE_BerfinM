                            ---COLLECTİONS---

-->Veri koleksiyonlarını yönetmek için kullanılan bir API(Apllaction Programming Interface) kütüphanedir.

-->Java collection interfacesini doğrudan implementlenemez(Superinterface).
Ancak "List,Set,Queue" implemen edilebilir(Subinterface.


                     -List Interface-
--> Array gibi verilşleri sıralı bir şekilde saklar
--> Nesnesi oluşturulamaz

1-ArrayList
2-LinkedList
3-Vector
4-Stack
--> List interface Collection interface'in tüm metotlarını içerir.

            1-ArrayList

---Yaygın kullanılan metot ve collectionlar---

->  add() listeye öge ekler

List<Integer> numberList = new ArrayList<>();

        numberList.add(1);
        numberList.add(2);
        numberList.add(3);
        System.out.println("List : "+numberList);


->  addAll() bir listedeki tüm ögeleri bir diğerine aktarır


->  get() listelerdeki ögelere rastgele erişmeyi sağlar

        int number = numberList.get(2);  /*Auto Unboxing*/
        System.out.println("Accessed element : "+number);

        *Accessed element : 3

->  iterator() listelerin ögelerini sırasıyla erişmek için kullanılır

->  set() listelerin ögelerini değiştirir

 System.out.println("List before Set : "+nameList);

     **List before Set : [Java, Python, C#]

 nameList.set(1,"Scala");
 System.out.println("List after Set : "+nameList);

    **List after Set : [Java, Scala, C#]

->  remove() Listeden ögeyi kaldırır(siler)

      System.out.println("List before Remove : "+nameList);
      **List before Remove : [Java, Scala, C#]
              nameList.remove(2);
              System.out.println("List after Remove : "+nameList);
      **List after Remove : [Java, Scala]

-> İç değer ayrımı da yapılabilinir. Silinecek ögeyi belirt

System.out.println("List before Remove : "+nameList);
**List before Remove : [Java, Scala]

        nameList.remove("Scala");
        System.out.println("List after Remove : "+nameList);

**List after Remove : [Java]



->  removeAll() Listedeki tüm ögeleri siler/ kaldırır

->  clear() lüstedeki tüm ögelr silinir

->  size() listenin uzunluğunu döndürür

->  toArray() listeyi diziye(Array) dönüştürür

->  contains() bir liste belirtilen ögeyi içeriyotrsa true döndürür


 //ArrayList<String> animalList = new ArrayList<>();


   --->       ArrayList --> List --> Collection

 Syntax;
 ArrayList<Type> arrayList = new ArrayList<>();


!!!!Ekleme silme işlemleri yapılacaksa "LinkedList"
     Arama yapılacaksa "ArrayList" kullanılır

ArrayList ve LinkedaList Farkları;

1-LimkedList 3 karakter tutar ( lendi dğeri bir önceki ve bir sonraki)
 ArrayList ise tek bir değeri tek bir yerde tutar

2-LinkedListe bir elemana erişmek için baştan sona gidilir
 ArrayListe ögenin indexi biliniyorsa daha kolay erişim sağlar




