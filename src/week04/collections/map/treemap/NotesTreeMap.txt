                            ---MAP---

-> Kendileriyle ilişkili keyleri kullanarak değerlere(value) erişir

3 farklı sets( küme) var;


-Map Interface olduğu için nesnesini oluşturamayız

-HashMap ->
-Enum  ->
-LinkedHashMap ->
-WeakHashMap ->
-TreeMap ->


-java.util.Map paketi kulllanılır


                         -TreeMap -

->  Doğal sıralama yapar

             Metotlar

 - put()

   TreeMap<Integer,String> numberMap = new TreeMap<>();
         numberMap.put(3,"three");
         numberMap.put(7,"seven");
         numberMap.put(1,"one");

         System.out.println("Beginning : "+numberMap);

                            **Beginning : {1=one, 3=three, 7=seven}


         TreeMap<Integer,String> numberMap2 = new TreeMap<>();
         numberMap2.put(5,"five");
         numberMap2.put(9,"nine");

         System.out.println("Beginning : "+numberMap2);

                          **Beginning : {5=five, 9=nine}

 - putAll()

        numberMap.putAll(numberMap2);

         System.out.println("After putAll() : "+numberMap);

                           **After putAll() : {1=one, 3=three, 5=five, 7=seven, 9=nine}
                           //yeni sıralamyı doğal sıralamayla yapar

 - putIfAbsent()

 -entrySet()

 -keySet()

 -values()

 -get()

 -getOrDefault()

 -remove(key)

 -remove(key,value)

 -replace(key,value)

 -replace(eski,anahtar,yeni)

 -replaceAll(function)


--Methods for Navigation --

1.First and Last Methods

-firstKey()  -> Doğal sıralmaya göre ilk öge
                Integer firstKey = numberMap.firstKey();

                System.out.println("First Key : "+firstKey);

                                     **First Key : 3
-firstEntry()

          System.out.println("First Entry : "+numberMap.firstEntry());

                                         **First Entry : 3=three

-lastKey() -> Doğal sıralmaya göre son öge
                 Integer lastKey = numberMap.lastKey();

                System.out.println("Last Key : "+lastKey);

                                  **Last Key : 9
-lastEntry()   ->

         System.out.println("Last Entry : "+numberMap.lastEntry());

                                         **Last Entry : 9=nine

2-
highKey() Kendinden sonra gelen düşüğü

highEntry() Kendinden sonra gelen düşüğü  ->key+value

lowerKey() Kendinden önce gelen en yükseği

lowerEntry() kKendinden önce gelen en yükseği -> key+value

ceilingKey()

ceilingEntry()

floorKey()

floorEntry()

4.headMap() -> Girilen key den büyük olanları sıralar. Belirtilmediği sürece boolean değeri "false"
               girilen key'i dahil eder
                                         **booleanValue parametresi isteğe bağlıdır

              **Before HeadMap : {1=one, 3=tree, 5=five, 7=seven, 8=eight, 9=nine}

Map<Integer,String> headMap = numberMap.headMap(7);
        System.out.println("After headMap(3) : "+headMap);
                           **After headMap(3) : {1=one, 3=tree, 5=five}

 Map<Integer,String> headMapWithBoolean = numberMap.headMap(7,true);
        System.out.println("After headMap(7,true) : "+headMapWithBoolean);

                               **After headMap(7,true) : {1=one, 3=tree, 5=five, 7=seven}

                  true ile girilen değeri de yazıdır

tailMap() -> Girilen key den büyük olanları sıralar. Belirtilmediği sürece boolean değeri "true"
girilen key'i dahil eder  -tailMapWithBoolean()-

 System.out.println("\nBefore TailMap : "+numberMap);
                    **Before TailMap : {1=one, 3=tree, 5=five, 7=seven, 8=eight, 9=nine}
        Map<Integer, String>  tailMap = numberMap.tailMap(7);

        System.out.println("After tailMap(7) : "+tailMap);

                   **After tailMap(7) : {7=seven, 8=eight, 9=nine}

 tailMapWithBoolean()

  Map<Integer, String>  tailMapWithBoolean = numberMap.tailMap(7,false);
          System.out.println("After tailMap(7,false) : "+tailMapWithBoolean);

                                **After tailMap(7,false) : {8=eight, 9=nine}


 subMap() -> Veriyi ortadan kırparİlk girilen değerin boolean ı true son girilenin false dir

  System.out.println("\nBefore SubMap : "+numberMap);
         Map<Integer, String>  subMap = numberMap.subMap(3,7);
         System.out.println("After subMap(3,7) : "+subMap);

                               **After subMap(3,7) : {3=tree, 5=five}

subMapWithBoolean() hangi değerin dahil edilip edlimeyeceğine bu metotla karar verebiliriz

Map<Integer, String>  subMapWithBoolean = numberMap.subMap(3,false,7,true);
        System.out.println("After subMap(3,false,7,true) : "+subMapWithBoolean);

                                           **After subMap(3,false,7,true) : {5=five, 7=seven}



               HashMap vs TreeMap

    ->Sırasız depolama   -HashMAP
    ->Doğal Sıralama     -TreeMAP

   -> treeMap de büyük veri işlemleri yavaş çalışır

   -> Her ikisinde de key benzersiz olmalıdır

   -> HasMap daha az bellek tüketir. (Rastgele seçim)
   -> TreeMap daha fazla bellek tüketir (doğal sıralama)

   ->Sıralama ve arama işlemleri için "TreeMap"
   ->Performasns önemli sıralma önemli değilse "HashMap" kullanılır.



